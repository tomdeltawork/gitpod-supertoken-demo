// @ts-nocheck
import RecipeModule from "supertokens-node/lib/build/recipeModule";
import { TypeInput, TypeNormalisedInput, RecipeInterface, APIInterface } from "supertokens-node/lib/build/recipe/emailpassword/types";
import { NormalisedAppinfo, APIHandled, HTTPMethod, RecipeListFunction, UserContext } from "supertokens-node/lib/build/types";
import STError from "supertokens-node/lib/build/recipe/emailpassword/error";
import NormalisedURLPath from "supertokens-node/lib/build/normalisedURLPath";
import type { BaseRequest, BaseResponse } from "supertokens-node/lib/build/framework";
import EmailDeliveryIngredient from "supertokens-node/lib/build/ingredients/emaildelivery";
import { TypeEmailPasswordEmailDeliveryInput } from "supertokens-node/lib/build/recipe/emailpassword/types";
export default class Recipe extends RecipeModule {
    private static instance;
    static RECIPE_ID: string;
    config: TypeNormalisedInput;
    recipeInterfaceImpl: RecipeInterface;
    apiImpl: APIInterface;
    isInServerlessEnv: boolean;
    emailDelivery: EmailDeliveryIngredient<TypeEmailPasswordEmailDeliveryInput>;
    constructor(
        recipeId: string,
        appInfo: NormalisedAppinfo,
        isInServerlessEnv: boolean,
        config: TypeInput | undefined,
        ingredients: {
            emailDelivery: EmailDeliveryIngredient<TypeEmailPasswordEmailDeliveryInput> | undefined;
        }
    );
    static getInstanceOrThrowError(): Recipe;
    static init(config?: TypeInput): RecipeListFunction;
    static reset(): void;
    getAPIsHandled: () => APIHandled[];
    handleAPIRequest: (
        id: string,
        tenantId: string,
        req: BaseRequest,
        res: BaseResponse,
        _path: NormalisedURLPath,
        _method: HTTPMethod,
        userContext: UserContext
    ) => Promise<boolean>;
    handleError: (err: STError, _request: BaseRequest, response: BaseResponse) => Promise<void>;
    getAllCORSHeaders: () => string[];
    isErrorFromThisRecipe: (err: any) => err is STError;
}
