// @ts-nocheck
import RecipeModule from "supertokens-node/lib/build/recipeModule";
import { APIHandled, HTTPMethod, NormalisedAppinfo, RecipeListFunction, UserContext } from "supertokens-node/lib/build/types";
import { APIInterface, RecipeInterface, TypeInput, TypeNormalisedInput } from "supertokens-node/lib/build/recipe/dashboard/types";
import NormalisedURLPath from "supertokens-node/lib/build/normalisedURLPath";
import type { BaseRequest, BaseResponse } from "supertokens-node/lib/build/framework";
import error from "supertokens-node/lib/build/error";
export default class Recipe extends RecipeModule {
    private static instance;
    static RECIPE_ID: string;
    config: TypeNormalisedInput;
    recipeInterfaceImpl: RecipeInterface;
    apiImpl: APIInterface;
    isInServerlessEnv: boolean;
    constructor(recipeId: string, appInfo: NormalisedAppinfo, isInServerlessEnv: boolean, config?: TypeInput);
    static getInstanceOrThrowError(): Recipe;
    static init(config?: TypeInput): RecipeListFunction;
    static reset(): void;
    getAPIsHandled: () => APIHandled[];
    handleAPIRequest: (
        id: string,
        tenantId: string,
        req: BaseRequest,
        res: BaseResponse,
        __: NormalisedURLPath,
        ___: HTTPMethod,
        userContext: UserContext
    ) => Promise<boolean>;
    handleError: (err: error, _: BaseRequest, __: BaseResponse) => Promise<void>;
    getAllCORSHeaders: () => string[];
    isErrorFromThisRecipe: (err: any) => err is error;
}
